#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6

#
import sys
import numpy as np
import pandas as pd
from bs4 import BeautifulSoup as bs
import requests



try:
    from Tkinter import *
    import tkFileDialog as fdbox
except ImportError:
    from tkinter import *
    import tkinter.filedialog as fdbox
try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import taxSee_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = taxSee (root)
    taxSee_support.init(root, top)
    root.mainloop()

w = None
def create_taxSee(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = taxSee (w)
    taxSee_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_taxSee():
    global w
    w.destroy()
    w = None


class taxSee:
    def runTaxSee(self):
# Reading the data from the input file
        missingTaxFile = pd.read_csv(self.Entry1.get(),header=None)

        speciesNames = (missingTaxFile.iloc[:,[0]]).values.tolist()
        speciesNames = np.array(speciesNames)
        speciesNames = speciesNames.ravel()
        
        specieslist = []
        filesToRetry = []
        taxidlist = []
# Creates the initial structure of the database for the missing tax data
        missingTaxDb = pd.DataFrame()
        
        missingTaxDb_cols = ['superkingdom',
                                'kingdom',
                                'subkingdom',
                                'superphylum',
                                'phylum',
                                'subphylum',
                                'superclass',
                                'class',
                                'subclass',
                                'superorder',
                                'order',
                                'suborder',
                                'superfamily',
                                'family',
                                'subfamily',
                                'tribe',
                                'subtribe',
                                'genus',
                                'subgenus',
                                'species',
                                'subspecies',
                                'taxid']
        
        missingTaxDb = missingTaxDb.append(pd.Series(missingTaxDb_cols),ignore_index=True)
        
# Reads and stores  the taxids corresponding to the scientific names
        
        for i in speciesNames:
            temparray1 = i.strip().split(' ')
            i = " ".join(temparray1)
            specieslist.append(i)
            URL = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=taxonomy&term=%s[SCIN]" % i
            print(URL)
            response = requests.get(URL)
            soup = bs(response.content,features="xml")
            taxId = soup.find_all('Id')
            if(len(taxId) >0):
                with open("missingNamesTaxIds.txt",'a') as taxidinfo:
                    for tax in taxId:
                        taxidinfo.write(str(i)+"\t"+tax.get_text()+"\n")
                        taxidlist.append(tax.get_text())
                    
            else:
                filesToRetry.append(str(i))
        
# Reads and stores(as text files) the tax information for each taxid   
                   
        for i in taxidlist:
            
            URL = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=taxonomy&id=%s&mode=text&report=xml" % i
            print(URL)
            response = requests.get(URL)
            soup = bs(response.content,features="xml")
            sci_names = soup.find_all('ScientificName')
            ranks = soup.find_all('Rank')
            with open(str(i)+".txt",'w') as taxinfo:
                for names,rank in zip(sci_names,ranks):
                    if(rank.get_text() != "no rank"):              
                        taxinfo.write(rank.get_text()+"\t"+names.get_text()+"\n")
            
# Goes through each text file for each taxid and extracts the tax information 
                        
        for i in taxidlist:
            taxinfoFile = pd.read_csv(str(i)+".txt",header=None,sep="\t")
            rankList = (taxinfoFile.iloc[:,[0]]).values.tolist()
            rankList = np.array(rankList)
            rankList.ravel()
            sciNameList = (taxinfoFile.iloc[:,[1]]).values.tolist()
            sciNameList = np.array(sciNameList)
            sciNameList.ravel()
            if('species' in rankList):
                Superkingdom_index = [i1 for i1, e in enumerate(rankList) if e == 'superkingdom']
                Kingdom_index = [i2 for i2, e in enumerate(rankList) if e == 'kingdom']
                Subkingdom_index = [i3 for i3, e in enumerate(rankList) if e == 'subkingdom']
                Superphylum_index = [i4 for i4, e in enumerate(rankList) if e == 'superphylum']
                Phylum_index = [i5 for i5, e in enumerate(rankList) if e == 'phylum']
                Subphylum_index = [i6 for i6, e in enumerate(rankList) if e == 'subphylum']
                Superclass_index = [i7 for i7, e in enumerate(rankList) if e == 'superclass']
                Class_index = [i8 for i8, e in enumerate(rankList) if e == 'class']
                Subclass_index = [i9 for i9, e in enumerate(rankList) if e == 'subclass']
                Superorder_index = [i10 for i10, e in enumerate(rankList) if e == 'superorder']
                Order_index = [i11 for i11, e in enumerate(rankList) if e == 'order']
                Suborder_index = [i12 for i12, e in enumerate(rankList) if e == 'suborder']
                Superfamily_index = [i13 for i13, e in enumerate(rankList) if e == 'superfamily']
                Family_index = [i14 for i14, e in enumerate(rankList) if e == 'family']
                Subfamily_index = [i15 for i15, e in enumerate(rankList) if e == 'subfamily']
                Tribe_index = [i16 for i16, e in enumerate(rankList) if e == 'tribe']
                Subtribe_index = [i17 for i17, e in enumerate(rankList) if e == 'subtribe']
                Genus_index = [i18 for i18, e in enumerate(rankList) if e == 'genus']
                Subgenus_index = [i19 for i19, e in enumerate(rankList) if e == 'subgenus']
                Species_index = [i20 for i20, e in enumerate(rankList) if e == 'species']
                Subspecies_index = [i21 for i21, e in enumerate(rankList) if e == 'subspecies']
                
# Stores the extracted tax info inside the pandas dataframe
                
                tempList22 = [None] * 22
                
                if(Superkingdom_index):
                    tempList22[0] = str(sciNameList[Superkingdom_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[0] = 'n'
                    
                if(Kingdom_index):
                    tempList22[1] = str(sciNameList[Kingdom_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[1] = 'n'
                    
                if(Subkingdom_index):
                    tempList22[2] = str(sciNameList[Subkingdom_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[2] = 'n'
                    
                if(Superphylum_index):
                    tempList22[3] = str(sciNameList[Superphylum_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[3] = 'n'
                    
                if(Phylum_index):
                    tempList22[4] = str(sciNameList[Phylum_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[4] = 'n'
                    
                if(Subphylum_index):
                    tempList22[5] = str(sciNameList[Subphylum_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[5] = 'n'
                    
                if(Superclass_index):
                    tempList22[6] = str(sciNameList[Superclass_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[6] = 'n'
                    
                if(Class_index):
                    tempList22[7] = str(sciNameList[Class_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[7] = 'n'
                    
                if(Subclass_index):
                    tempList22[8] = str(sciNameList[Subclass_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[8] = 'n'
                    
                if(Superorder_index):
                    tempList22[9] = str(sciNameList[Superorder_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[9] = 'n'
                    
                if(Order_index):
                    tempList22[10] = str(sciNameList[Order_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[10] = 'n'
                    
                if(Suborder_index):
                    tempList22[11] = str(sciNameList[Suborder_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[11] = 'n'
                    
                if(Superfamily_index):
                    tempList22[12] = str(sciNameList[Superfamily_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[12] = 'n'
                    
                if(Family_index):
                    tempList22[13] = str(sciNameList[Family_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[13] = 'n'
                    
                if(Subfamily_index):
                    tempList22[14] = str(sciNameList[Subfamily_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[14] = 'n'
                    
                if(Tribe_index):
                    tempList22[15] = str(sciNameList[Tribe_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[15] = 'n'
                    
                if(Subtribe_index):
                    tempList22[16] = str(sciNameList[Subtribe_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[16] = 'n'
                    
                if(Genus_index):
                    tempList22[17] = str(sciNameList[Genus_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[17] = 'n'
                    
                if(Subgenus_index):
                    tempList22[18] = str(sciNameList[Subgenus_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[18] = 'n'
                    
                if(Species_index):
                    tempList22[19] = str(sciNameList[Species_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[19] = 'n'
                    
                if(Subspecies_index):
                    tempList22[20] = str(sciNameList[Subspecies_index[0]]).replace('[','').replace(']','').replace('\'','')
                else:
                    tempList22[20] = 'n'
                    
                tempList22[21] = str(i)
                    
                missingTaxDb = missingTaxDb.append(pd.Series(tempList22),ignore_index=True)

# Converts the pandas dataframe to .csv format and saves the file.
                
        missingTaxDb.to_csv("missingTaxonomyInfo.csv",index=False,header=False)

# Informs about scientific names for which the tax information retrieval failed. 
        
        with open("taxSeeLog.txt",'w') as logFile:
            if(filesToRetry):
                logFile.write("There were problems in retrieving info for the following: \n\n")
                for i in filesToRetry:
                    logFile.write(str(i)+'\n')
            else:
                logFile.write("It looks like all the info has been successfully retrieved")
                
    def loadtemplate(self):
        filename = fdbox.askopenfilename(filetypes=[("All files","*.*")])
        self.Entry1.delete(0,END)
        self.Entry1.insert(0,filename)
        return
        
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("600x545+688+211")
        top.title("taxSee")
        top.configure(background="#d9d9d9")



        self.Label1 = Label(top)
        self.Label1.place(relx=0.03, rely=0.04, height=266, width=573)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(justify=LEFT)
        self.Label1.configure(text='''Instructions

1) Give a text file that contains the scientific names of the organisms as input.

2) Each scientific name should be in a separate line in the text file.

3) After specifying the input, press taxSee button.

4) You should get a .csv file which contains the taxonomy information.

5) There will be a missingNamesTaxIds.txt file that maps the scientific names to taxids.

6) There will be some intermediate .txt files that contain taxonomy info for each taxid.''')

        self.Label2 = Label(top)
        self.Label2.place(relx=0.07, rely=0.64, height=26, width=65)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Input file''')

        self.Entry1 = Entry(top)
        self.Entry1.place(relx=0.2, rely=0.64, relheight=0.04, relwidth=0.52)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(width=314)

        self.Button1 = Button(top)
        self.Button1.place(relx=0.76, rely=0.63, height=33, width=56)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Browse''',command = self.loadtemplate)

        self.Button2 = Button(top)
        self.Button2.place(relx=0.38, rely=0.75, height=73, width=126)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''taxSee''',command = self.runTaxSee)
        self.Button2.configure(width=126)






if __name__ == '__main__':
    vp_start_gui()



